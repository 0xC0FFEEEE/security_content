name: Attempt To Disable Services
id: afb31de4-d023-11eb-98d5-acde48001122
version: 3
description: The following analytic identifies Windows Service Control, `sc.exe`,
  attempting to disable a service. This is typically identified in parallel with other
  instances of service enumeration of attempts to stop a service and then disable
  it. Adversaries utilize this technique to terminate security services or other related
  services to continue there objective and evade detections.
search: ' | from read_ba_enriched_events() | eval timestamp = ucast(map_get(input_event,"time"),"long",
  null) | eval metadata = ucast(map_get(input_event, "metadata"),"map<string, any>",
  null) | eval metadata_uid = ucast(map_get(metadata, "uid"),"string", null) | eval
  process=ucast(map_get(input_event,"process"), "map<string, any>", null) | eval process_pid=ucast(map_get(process,"pid"),
  "string", null) | eval process_file=ucast(map_get(process,"file"), "map<string,
  any>", null) | eval process_file_name=ucast(map_get(process_file,"name"), "string",
  null) | eval process_cmd_line=ucast(map_get(process,"cmd_line"), "string", null)
  | eval process_user=ucast(map_get(process,"user"), "map<string, any>", null) | eval
  process_user_name=ucast(map_get(process_user,"name"), "string", null) | eval actor_process=ucast(map_get(input_event,"actor_process"),
  "map<string, any>", null) | eval actor_process_pid=ucast(map_get(actor_process,"pid"),
  "string", null) | eval actor=ucast(map_get(input_event,"actor"), "map<string, any>",
  null) | eval actor_process_file=ucast(map_get(actor_process,"file"), "map<string,
  any>", null) | eval actor_process_file_name=ucast(map_get(actor_process_file,"name"),
  "string", null) | eval device=ucast(map_get(input_event,"device"), "map<string,
  any>", null) | eval device_hostname=ucast(map_get(device,"hostname"), "string",
  null) | where like(process_cmd_line, "%config%") AND like(process_cmd_line, "%disabled%")
  AND process_file_name="sc.exe" 
  | eval body=create_map(
    "activity_id", 1,
    "analytic_stories", ["XMRig", "Ransomware"],
    "cis_csc", [create_map("control", "CIS 10", "version", 7)],
    "category_uid", 2,
    "class_name", "Detection Report",
    "class_uid", 102001,
    "confidence", 60,
    "confidence_id", 2,
    "devices", [
        create_map(
            "hostname", device_hostname, "type_id", 0, "uuid", ucast(map_get(device,"uuid"), "string", null)
        )
    ],
    "duration", 0,
    "time", timestamp,
    "evidence", create_map("process.user.name", process_user_name, "device.hostname", device_hostname, "process.file.name", process_file_name, "process.cmd_line", process_cmd_line),
    "impact", 60,
    "impact_id", 4,
    "kill_chain", [create_map("phase", "Actions on Objectives", "phase_id", 7)],
    "attacks", [create_map("tactics", [create_map("name", "Impact", "uid", "TA0040")], "technique", create_map("name", "Service Stop", "uid", "T1489"), "version", "12.1")],  
    "message", concat("Attempt To Disable Services has been triggered on ", device_hostname, " by ", process_user_name, "."),
    "metadata", create_map(
        "product", create_map(
            "name", "Behavioral Analytic Service",
            "vendor_name", "Splunk"
        ),
        "version", "1.0.0"
    ),
    "nist", ["DE.CM"],
    "observables", [create_map("name", "process.user.name", "type_id", 4, "value", process_user_name), create_map("name", "device.hostname", "type_id", 1, "value", device_hostname), create_map("name", "process.file.name", "type_id", 7, "value", process_file_name), create_map("name", "process.cmd_line", "type_id", 99, "value", process_cmd_line)],
    "risk_level", "Low",
    "risk_level_id", 1,
    "risk_score", 36,
    "severity_id", 4,
    "type_uid", 10200101,
    "users", [
        create_map(
            "name", process_user_name, "uuid", ucast(map_get(device,"uuid"), "string", null)
        )
    ]
  )
  | into write_ba_finding_events();'
how_to_implement: To successfully implement this search, you need to be ingesting
  logs with the process name, parent process, and command-line executions from your
  endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the
  Sysmon TA.
known_false_positives: It is possible administrative scripts may start/stop/delete
  services. Filter as needed.
references:
- https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/
- https://app.any.run/tasks/c0f98850-af65-4352-9746-fbebadee4f05/
- https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1562.001/T1562.001.md#atomic-test-14---disable-arbitrary-security-windows-service
tags:
  analytic_story:
  - XMRig
  - Ransomware
  cis20:
  - CIS 10
  kill_chain_phases:
  - Actions on Objectives
  mitre_attack_id:
  - T1489
  nist:
  - DE.CM
  required_fields:
  - process.user.name
  - device.hostname
  - process.file.name
  - process.cmd_line
  risk_score: 36
  security_domain: endpoint
  risk_severity: low
  research_site_url: https://research.splunk.com/endpoint/afb31de4-d023-11eb-98d5-acde48001122/
  event_schema: ocsf
  mappings:
  - ocsf: process.pid
    cim: process_id
  - ocsf: process.file.name
    cim: process_name
  - ocsf: process.cmd_line
    cim: process
  - ocsf: process.user.name
    cim: user
  - ocsf: actor_process.pid
    cim: parent_process_id
  - ocsf: actor.process.file.name
    cim: parent_process_name
  - ocsf: device.hostname
    cim: dest
test:
  name: Attempt To Disable Services Unit Test
  tests:
  - name: Attempt To Disable Services
    attack_data:
    - file_name: sc_disable.log
      data: https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/ransomware_ttp/ssa_data1/sc_disable.log
      source: WinEventLog:Security
