name: Detect Prohibited Applications Spawning cmd exe
id: c10a18cb-fd80-4ffa-a844-25026e0a0c94
version: 3
description: The following analytic identifies parent processes, browsers, Windows
  terminal applications, Office Products and Java spawning cmd.exe. By its very nature,
  many applications spawn cmd.exe natively or built into macros. Much of this will
  need to be tuned to further enhance the risk.
search: ' | from read_ba_enriched_events() | eval timestamp = ucast(map_get(input_event,"time"),"long",
  null) | eval metadata = ucast(map_get(input_event, "metadata"),"map<string, any>",
  null) | eval metadata_uid = ucast(map_get(metadata, "uid"),"string", null) | eval
  process=ucast(map_get(input_event,"process"), "map<string, any>", null) | eval process_file=ucast(map_get(process,"file"),
  "map<string, any>", null) | eval process_file_name=ucast(map_get(process_file,"name"),
  "string", null) | eval actor=ucast(map_get(input_event,"actor"), "map<string, any>",
  null) | eval actor_process=ucast(map_get(actor,"process"), "map<string, any>", null)
  | eval actor_process_file=ucast(map_get(actor_process,"file"), "map<string, any>",
  null) | eval actor_process_file_name=ucast(map_get(actor_process_file,"name"), "string",
  null) | eval actor_process_cmd_line=ucast(map_get(actor_process,"cmd_line"), "string",
  null) | eval process_cmd_line=ucast(map_get(process,"cmd_line"), "string", null)
  | eval process_file_path=ucast(map_get(process_file,"path"), "string", null) | eval
  process_user=ucast(map_get(process,"user"), "map<string, any>", null) | eval process_user_name=ucast(map_get(process_user,"name"),
  "string", null) | eval device=ucast(map_get(input_event,"device"), "map<string,
  any>", null) | eval device_hostname=ucast(map_get(device,"hostname"), "string",
  null) | where (actor_process_file_name="winword.exe" OR actor_process_file_name="excel.exe"
  OR actor_process_file_name="outlook.exe" OR actor_process_file_name="acrobat.exe"
  OR actor_process_file_name="acrord32.exe" OR actor_process_file_name="iexplore.exe"
  OR actor_process_file_name="opera.exe" OR actor_process_file_name="firefox.exe"
  OR actor_process_file_name="powershell.exe" OR actor_process_file_name IS NOT NULL)
  OR (actor_process_file_name="java.exe" AND (NOT match_regex(actor_process_cmd_line,
  /(?i)patch1-Hotfix1a/)=true)) OR (actor_process_file_name="chrome.exe" AND (NOT
  actor_process_cmd_line="chrome-extension")) 
  | eval body=create_map(
    "activity_id", 1,
    "analytic_stories", ["Suspicious Command-Line Executions", "Insider Threat"],
    "cis_csc", [create_map("control", "CIS 10", "version", 7)],
    "category_uid", 2,
    "class_name", "Detection Report",
    "class_uid", 102001,
    "confidence", 50,
    "confidence_id", 2,
    "devices", [
        create_map(
            "hostname", device_hostname, "type_id", 0, "uuid", ucast(map_get(device,"uuid"), "string", null)
        )
    ],
    "duration", 0,
    "time", timestamp,
    "evidence", create_map("process.user.name", process_user_name, "device.hostname", device_hostname, "actor.process.file.name", actor_process_file_name, "actor.process.cmd_line", actor_process_cmd_line),
    "impact", 70,
    "impact_id", 4,
    "kill_chain", [create_map("phase", "Installation", "phase_id", 5)],
    "attacks", [create_map("tactics", [create_map("name", "Execution", "uid", "TA0002")], "technique", create_map("name", "Command and Scripting Interpreter", "uid", "T1059"), "version", "12.1")],  
    "message", concat("Detect Prohibited Applications Spawning cmd exe has been triggered on ", device_hostname, " by ", process_user_name, "."),
    "metadata", create_map(
        "product", create_map(
            "name", "Behavioral Analytic Service",
            "vendor_name", "Splunk"
        ),
        "version", "1.0.0"
    ),
    "nist", ["DE.AE"],
    "observables", [create_map("name", "process.user.name", "type_id", 4, "value", process_user_name), create_map("name", "device.hostname", "type_id", 1, "value", device_hostname), create_map("name", "actor.process.file.name", "type_id", 7, "value", actor_process_file_name), create_map("name", "actor.process.cmd_line", "type_id", 25, "value", actor_process_cmd_line)],
    "risk_level", "Low",
    "risk_level_id", 1,
    "risk_score", 35,
    "severity_id", 4,
    "type_uid", 10200101,
    "users", [
        create_map(
            "name", process_user_name, "uuid", ucast(map_get(device,"uuid"), "string", null)
        )
    ]
  )
  | into write_ba_finding_events();'
how_to_implement: In order to successfully implement this analytic, you will need
  endpoint process data from a EDR product or Sysmon. This search has been modified
  to process raw sysmon data from attack_range's nxlogs on DSP.
known_false_positives: There are circumstances where an application may legitimately
  execute and interact with the Windows command-line interface.
references:
- https://attack.mitre.org/techniques/T1059/
tags:
  analytic_story:
  - Suspicious Command-Line Executions
  - Insider Threat
  cis20:
  - CIS 10
  kill_chain_phases:
  - Installation
  mitre_attack_id:
  - T1059
  nist:
  - DE.AE
  required_fields:
  - process.user.name
  - device.hostname
  - actor.process.file.name
  - actor.process.cmd_line
  risk_score: 35
  security_domain: endpoint
  risk_severity: low
  research_site_url: https://research.splunk.com/endpoint/c10a18cb-fd80-4ffa-a844-25026e0a0c94/
  event_schema: ocsf
  mappings:
  - ocsf: process.user.name
    cim: user
  - ocsf: device.hostname
    cim: dest
  - ocsf: actor.process.file.name
    cim: parent_process_name
  - ocsf: actor.process.cmd_line
    cim: parent_process
test:
  name: Detect Prohibited Applications Spawning cmd exe Unit Test
  tests:
  - name: Detect Prohibited Applications Spawning cmd exe
    attack_data:
    - file_name: windows-security.log
      data: https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.003/powershell_spawn_cmd/windows-security.log
      source: WinEventLog:Security
