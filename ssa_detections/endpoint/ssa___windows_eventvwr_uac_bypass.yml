name: Windows Eventvwr UAC Bypass
id: 66adff66-90d9-11ec-aba7-acde48001122
version: 1
date: '2022-02-18'
author: Lou Stella, Splunk
type: Anomaly
status: experimental
description: The following search identifies Eventvwr bypass by identifying the registry
  modification into a specific path that eventvwr.msc looks to (but is not valid)
  upon execution. A successful attack will include a suspicious command to be executed
  upon eventvwr.msc loading. Upon triage, review the parallel processes that have
  executed. Identify any additional registry modifications on the endpoint that may
  look suspicious. Remediate as necessary.
data_source:
- Windows Security 4688
search: ' | from read_ba_enriched_events() | eval timestamp = ucast(map_get(input_event,"time"),"long",
  null) | eval metadata = ucast(map_get(input_event, "metadata"),"map<string, any>",
  null) | eval metadata_uid = ucast(map_get(metadata, "uid"),"string", null) | eval
  disposition_id = ucast(map_get(input_event, "disposition_id"), "integer", null)
  | eval device = ucast(map_get(input_event, "device"), "map<string,any>", null) |
  eval device_hostname = ucast(map_get(device, "hostname"), "string", null) | eval
  device_uuid = ucast(map_get(device, "uuid"), "string", null) | eval inferred = ucast(map_get(input_event,
  "device"), "map<string,any>", null) | eval inferred_caller = ucast(map_get(inferred,
  "caller"), "map<string,any>", null) | eval inferred_caller_user = ucast(map_get(inferred_caller,
  "user"), "map<string,any>", null) | eval inferred_caller_user_uid = ucast(map_get(inferred_caller_user,
  "uid"), "string", null) | eval inferred_caller_user_name = ucast(map_get(inferred_caller_user,
  "name"), "string", null) | eval process=ucast(map_get(input_event,"process"), "map<string,
  any>", null) | eval process_file=ucast(map_get(process,"file"), "map<string, any>",
  null) | eval process_file_name=ucast(map_get(process_file,"name"), "string", null)
  | eval actor=ucast(map_get(input_event,"actor"), "map<string, any>", null) | eval
  actor_process=ucast(map_get(actor,"process"), "map<string, any>", null) | eval actor_process_file=ucast(map_get(actor_process,"file"),
  "map<string, any>", null) | eval actor_process_file_name=ucast(map_get(actor_process_file,"name"),
  "string", null) | eval actor_process_cmd_line=ucast(map_get(actor_process,"cmd_line"),
  "string", null) | eval process_cmd_line=ucast(map_get(process,"cmd_line"), "string",
  null) | eval process_file_path=ucast(map_get(process_file,"path"), "string", null)
  | where like(process_file_name, "%mscfile\\shell\\open\\command%") --finding_report--'
how_to_implement: To successfully implement this search you need to be ingesting information
  on process that include the name of the process responsible for the changes from
  your endpoints into the `Endpoint_Registry` datamodel.
known_false_positives: None known at this time.
references:
- https://blog.malwarebytes.com/malwarebytes-news/2021/02/lazyscripter-from-empire-to-double-rat/
- https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1548.002/T1548.002.md
- https://attack.mitre.org/techniques/T1548/002/
- https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/
tags:
  analytic_story:
  - Windows Defense Evasion Tactics
  - IcedID
  - Living Off The Land
  asset_type: Endpoint
  confidence: 100
  impact: 80
  message: Registry values were modified to bypass UAC using Event Viewer on $dest_device_id$
  mitre_attack_id:
  - T1548.002
  - T1548
  observable:
  - name: inferred_caller_user_name
    type: User Name
  - name: device_hostname
    type: Hostname
  - name: process_file_name
    type: File Name
  - name: process_cmd_line
    type: Other
  product:
  - Splunk Behavioral Analytics
  required_fields:
  - inferred_caller_user_name
  - device_hostname
  - process_file_name
  - process_cmd_line
  risk_score: 80
  security_domain: endpoint
  mappings:
  - ocsf: inferred_caller_user_name
    cim: user
  - ocsf: device_hostname
    cim: dest
  - ocsf: process_file_name
    cim: process_name
  - ocsf: process_cmd_line
    cim: process
tests:
- name: True Positive Test
  attack_data:
  - data: https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1548.002/ssa_eventvwr/windows-sysmon-registry.log
    source: XmlWinEventLog:Microsoft-Windows-Sysmon/Operational
    sourcetype: xmlwineventlog
