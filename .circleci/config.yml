# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#

version: 2.1

dependencies:
  cache_directories:
    - "~/.apt-cache"
  pre:
    - sudo rm -rf /var/cache/apt/archives && sudo ln -s ~/.apt-cache /var/cache/apt/archives && mkdir -p ~/.apt-cache/partial

apt-run: &apt-install
  name: install system packages
  command: |
    sudo apt update -qq
    sudo apt install -y enchant python-dev -qq

executors:
  content-executor:
    docker:
      - image: circleci/python:latest
    working_directory: ~/repo

jobs:
  validate-content:
    executor: content-executor
    steps:
      - run:
          name: checkout repo
          command: |
            if [ "${CIRCLE_BRANCH}" == "" ]; then
                git clone https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            else
                git clone --branch ${CIRCLE_BRANCH} https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            fi
      - restore_cache:
          key: virtualenv
      - run: *apt-install
      - run:
          name: install python dependencies
          command: |
            cd security-content
            rm -rf venv
            virtualenv --python=/usr/bin/python2.7 --clear venv
            source venv/bin/activate
            pip install -q -r requirements.txt
      - save_cache:
          key: virtualenv
          paths:
            - "/security-content/venv"
      - run:
          name: run validate
          command: |
            cd security-content
            source venv/bin/activate
            python bin/validate.py --path . --verbose

  build-sources:
    executor: content-executor
    steps:
      - run:
          name: checkout repo
          command: |
            if [ "${CIRCLE_BRANCH}" == "" ]; then
                git clone https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            else
                git clone --branch ${CIRCLE_BRANCH} https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            fi
      - run: *apt-install
      - run:
          name: install python dependencies
          command: |
            cd security-content
            rm -rf venv
            virtualenv --python=/usr/bin/python2.7 --clear venv
            source venv/bin/activate
            pip install -q -r requirements.txt
      - run:
          name: run generate
          command: |
            cd security-content
            source venv/bin/activate
            python bin/generate.py --path . --output package --storiesv1 --use_case_lib -v
      - run:
          name: update build number
          command: |
            cd security-content
            # update build number
            sed -i "s/build = .*$/build = $CIRCLE_BUILD_NUM/g" package/default/app.conf
            tar -czvf content-pack-build.tar.gz package/*
            ls
      - persist_to_workspace:
          root: security-content/
          paths:
              - content-pack-build.tar.gz
  build-package:
    executor: content-executor
    steps:
      - attach_workspace:
          at: ~/dist
      - run:
          name: grab splunk packaging toolkit
          command: |
            curl -Ls https://download.splunk.com/misc/packaging-toolkit/splunk-packaging-toolkit-1.0.0.tar.gz -o splunk-packaging-toolkit-latest.tar.gz
            mkdir slim-latest
            tar -zxvf splunk-packaging-toolkit-latest.tar.gz -C slim-latest --strip-components=1
      - run:
          name: install splunk packaging toolkit (slim)
          command: |
              cd slim-latest
              sudo pip install --upgrade pip setuptools
              sudo pip install virtualenv
              virtualenv --python=/usr/bin/python2.7 --clear venv
              source venv/bin/activate
              pip install .
      - run:
          name: create a .spl for this build using slim
          command: |
              cd slim-latest
              source venv/bin/activate
              slim package ../dist/content-pack-build.tar.gz
              ls -lah
                #  run-appinspect:
                #    executor: content-executor
                #    steps:
                #      - run:
                #          name: grab appinspect
                #          command: |
                #            curl -Ls http://dev.splunk.com/goto/appinspectdownload -o appinspect-lastest.tar.gz
                #            mkdir appinspect-latest
                #            tar -zxvf appinspect-lastest.tar.gz -C appinspect-latest --strip-components=1
                #      - run:
                #          name: insatll app inspect
                #          command: |
                #            cd appinspect-latest
                #            rm -rf venv
                #            sudo pip install --upgrade pip setuptools
                #            sudo pip install virtualenv
                #            virtualenv --python=/usr/bin/python2.7 --clear venv
                #            source venv/bin/activate
                #            pip install .
                #      - run:
                #          name: run app inspect
                #          command: |
                #            cd appinspect-latest
                #            source venv/bin/activate
                #            splunk-appinspect inspect ../TA-osquery.tar.gz --included-tags=cloud
  update-sources-github:
    executor: content-executor
    steps:
      - run:
          name: checkout repo
          command: |
            if [ "${CIRCLE_BRANCH}" == "" ]; then
                git clone https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            else
                git clone --branch ${CIRCLE_BRANCH} https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            fi
            # configure git to prep for commit
            git config credential.helper 'cache --timeout=120'
            git config user.email "research@splunk.com"
            git config user.name "research bot"
            it config --global push.default simple
            git add package/default/*
            git commit --allow-empty -m "updating package files [ci skip]"
            # Push quietly to prevent showing the token in log
            git push https://${GITHUB_TOKEN}@github.com/splunk/security-content.git ${CIRCLE_BRANCH}
            tar -czvf content-pack-${CIRCLE_TAG}.tar.gz package/*
      - persist_to_workspace:
          root: security-content/
          paths:
              - content-pack-${CIRCLE_TAG}.tar.gz
  publish-github-release:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace:
          at: ~/repo/updated
      - run:
          name: publish release on github
          command: |
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${CIRCLE_TAG} ~/repo/updated/content-pack-${CIRCLE_TAG}.tar.gz
workflows:
  version: 2.1
  validate-and-build:
    jobs:
      - validate-content:
          filters:
            tags:
              only: /.*/
      - build-sources:
          requires:
            - validate-content
          filters:
            tags:
              only: /.*/
      - build-package:
          requires:
            - validate-content
            - build-sources
          filters:
            tags:
              only: /.*/
      - update-sources-github:
          requires:
            - validate-content
            - build-sources
            - build-package
        # only update sources in develop
          filters:
            tags:
              only: /.*/
            branches:
              only: develop
      - publish-github-release:
          requires:
            - validate-content
            - build-sources
            - build-package
            - update-sources-github
        # only release when there is a tag
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/



